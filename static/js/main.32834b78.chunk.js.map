{"version":3,"sources":["components/GameStatus.js","components/Square.js","components/Board.js","components/Minesweeper.js","serviceWorker.js","index.js"],"names":["GameStatus","_ref","gameOver","revealsRemaining","react_default","a","createElement","concat","Square","onClick","onContextMenu","square","className","value","revealed","flagged","Board","state","squares","event","row","column","ctrlKey","_this","_this$state","newSquares","Object","toConsumableArray","setState","_this$revealSelfAndEm","revealSelfAndEmptyNeighbors","newRevealsRemaining","revealCount","newGameOver","preventDefault","this","randomizeBoard","oldGameId","gameId","props","_this$props","height","width","Array","fill","map","bombs","Math","floor","bombsPlaced","randomRow","random","randomColumn","x","y","neighborX","neighborY","arguments","length","undefined","isEmptySquare","result","_this2","_this$state2","GameStatus_GameStatus","rowIndex","columnIndex","Square_Square","key","Component","Minesweeper","boardSettings","onButtonClick","_this$state$boardSett","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","Minesweeper_Minesweeper","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32834b78.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./GameStatus.css\";\n\nexport default function GameStatus({ gameOver, revealsRemaining }) {\n  return (\n    <h3>\n      {!gameOver &&\n        revealsRemaining > 0 &&\n        `${revealsRemaining} squares remaining`}\n      {gameOver && revealsRemaining === 0 && \"You win! ðŸ˜€\"}\n      {gameOver && revealsRemaining > 0 && \"You lose. Try again!\"}\n    </h3>\n  );\n}\n","import React from \"react\";\nimport \"./Square.css\";\n\nexport default function Square({ onClick, onContextMenu, square }) {\n  return (\n    <li\n      onClick={onClick}\n      onContextMenu={onContextMenu}\n      className={`value-${square.value} ${square.revealed ? \"revealed\" : \"\"}`}\n    >\n      {square.revealed && square.value !== 0\n        ? square.value\n        : square.flagged\n        ? \"ðŸš©\"\n        : \"\\u00A0\"}\n    </li>\n  );\n}\n","import React, { Component } from \"react\";\nimport GameStatus from \"./GameStatus\";\nimport Square from \"./Square\";\nimport \"./Board.css\";\n\nexport default class Board extends Component {\n  state = { gameOver: false, revealsRemaining: null, squares: [] };\n  onClick = (event, row, column) => {\n    if (event.ctrlKey) {\n      return this.onContextMenu(event, row, column);\n    }\n\n    const { gameOver, revealsRemaining, squares } = this.state;\n\n    if (gameOver) return;\n\n    if (squares[row][column].revealed || squares[row][column].flagged) return;\n\n    if (squares[row][column].value === \"ðŸ’£\") {\n      const newSquares = [...squares];\n      newSquares[row][column].revealed = true;\n      return this.setState({ gameOver: true, squares: newSquares });\n    }\n\n    const {\n      squares: newSquares,\n      revealCount\n    } = this.revealSelfAndEmptyNeighbors([...squares], row, column);\n    const newRevealsRemaining = revealsRemaining - revealCount;\n    const newGameOver = newRevealsRemaining === 0;\n\n    this.setState({\n      gameOver: newGameOver,\n      revealsRemaining: newRevealsRemaining,\n      squares: newSquares\n    });\n  };\n  onContextMenu = (event, row, column) => {\n    event.preventDefault();\n\n    if (this.state.gameOver) return;\n\n    const squares = [...this.state.squares];\n\n    if (squares[row][column].revealed) return;\n\n    const { flagged } = squares[row][column];\n    squares[row][column].flagged = !flagged;\n\n    this.setState({ squares });\n  };\n  componentDidMount() {\n    this.randomizeBoard();\n  }\n  componentDidUpdate({ gameId: oldGameId }) {\n    const { gameId } = this.props;\n    if (gameId !== oldGameId) {\n      return this.randomizeBoard();\n    }\n  }\n  randomizeBoard() {\n    const { height, width } = this.props;\n\n    const squares = Array(height)\n      .fill(null)\n      .map(() =>\n        Array(width)\n          .fill(null)\n          .map(() => ({ flagged: false, revealed: false, value: 0 }))\n      );\n    const bombs = Math.floor(0.15 * height * width);\n    let bombsPlaced = 0;\n    while (bombsPlaced < bombs) {\n      const randomRow = Math.floor(Math.random() * height);\n      const randomColumn = Math.floor(Math.random() * width);\n      if (squares[randomRow][randomColumn].value === \"ðŸ’£\") {\n        continue;\n      }\n\n      squares[randomRow][randomColumn].value = \"ðŸ’£\";\n      bombsPlaced += 1;\n\n      for (let x = -1; x <= 1; x++) {\n        for (let y = -1; y <= 1; y++) {\n          const neighborX = randomColumn + x;\n          const neighborY = randomRow + y;\n          if (\n            neighborX >= 0 &&\n            neighborX < width &&\n            neighborY >= 0 &&\n            neighborY < height &&\n            squares[neighborY][neighborX].value !== \"ðŸ’£\"\n          ) {\n            squares[neighborY][neighborX].value += 1;\n          }\n        }\n      }\n    }\n    const revealsRemaining = height * width - bombsPlaced;\n    this.setState({ squares, revealsRemaining, gameOver: false });\n  }\n  revealSelfAndEmptyNeighbors(squares, row, column, revealCount = 0) {\n    const isEmptySquare = squares[row][column].value === 0;\n    squares[row][column].revealed = true;\n    revealCount += 1;\n    if (isEmptySquare) {\n      for (let x = -1; x <= 1; x++) {\n        for (let y = -1; y <= 1; y++) {\n          const neighborX = column + x;\n          const neighborY = row + y;\n          if (\n            neighborX >= 0 &&\n            neighborX < this.props.width &&\n            neighborY >= 0 &&\n            neighborY < this.props.height &&\n            squares[neighborY][neighborX].value !== \"ðŸ’£\" &&\n            !squares[neighborY][neighborX].revealed &&\n            !squares[neighborY][neighborX].flagged\n          ) {\n            const result = this.revealSelfAndEmptyNeighbors(\n              squares,\n              neighborY,\n              neighborX,\n              revealCount\n            );\n            squares = result.squares;\n            revealCount = result.revealCount;\n          }\n        }\n      }\n    }\n    return { squares, revealCount };\n  }\n  render() {\n    const { width } = this.props;\n    const { gameOver, revealsRemaining, squares } = this.state;\n    return (\n      <main>\n        <GameStatus gameOver={gameOver} revealsRemaining={revealsRemaining} />\n        <ul className={`width-${width}`}>\n          {squares.map((row, rowIndex) => {\n            return row.map((square, columnIndex) => {\n              return (\n                <Square\n                  key={`${rowIndex}.${columnIndex}`}\n                  onClick={event => this.onClick(event, rowIndex, columnIndex)}\n                  onContextMenu={event =>\n                    this.onContextMenu(event, rowIndex, columnIndex)\n                  }\n                  square={square}\n                />\n              );\n            });\n          })}\n        </ul>\n      </main>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./Minesweeper.css\";\n\nexport default class Minesweeper extends Component {\n  state = {\n    boardSettings: {\n      gameId: 0,\n      height: 8,\n      width: 8\n    }\n  };\n  onButtonClick = (height, width) => {\n    const { gameId } = this.state.boardSettings;\n    const boardSettings = { gameId: gameId + 1, height, width };\n    this.setState({ boardSettings });\n  };\n  render() {\n    const { gameId, height, width } = this.state.boardSettings;\n    return (\n      <div>\n        <h1>Minesweeper</h1>\n        <nav>\n          New game:\n          <button onClick={() => this.onButtonClick(8, 8)}>Easy</button>\n          <button onClick={() => this.onButtonClick(16, 16)}>Medium</button>\n          <button onClick={() => this.onButtonClick(24, 24)}>Hard</button>\n        </nav>\n        <Board gameId={gameId} height={height} width={width} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Minesweeper from \"./components/Minesweeper\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Minesweeper />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}