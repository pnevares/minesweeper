{"version":3,"sources":["components/Board.js","components/Minesweeper.js","serviceWorker.js","index.js"],"names":["Board","state","squares","revealsRemaining","onClick","event","row","column","ctrlKey","_this","onContextMenu","_this$state","revealed","flagged","_this$revealSelfAndEm","revealSelfAndEmptyNeighbors","Object","toConsumableArray","newSquares","revealCount","setState","preventDefault","this","randomizeBoard","oldGameId","_ref","gameId","props","console","log","_this$props","height","width","Array","fill","map","value","bombs","Math","floor","bombsPlaced","randomRow","random","randomColumn","x","y","neighborX","neighborY","_this2","react_default","a","createElement","className","concat","rowIndex","square","columnIndex","key","arguments","length","undefined","isEmptySquare","result","renderSquares","Component","Minesweeper","boardSettings","onButtonClick","_this$state$boardSett","Board_Board","Boolean","window","location","hostname","match","ReactDOM","render","Minesweeper_Minesweeper","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5db5bb73.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Board.css\";\n\nexport default class Board extends Component {\n  state = { squares: [], revealsRemaining: null };\n  onClick = (event, row, column) => {\n    if (event.ctrlKey) {\n      return this.onContextMenu(event, row, column);\n    }\n\n    const { revealsRemaining, squares } = this.state;\n\n    if (squares[row][column].revealed || squares[row][column].flagged) {\n      return;\n    }\n\n    const {\n      squares: newSquares,\n      revealCount\n    } = this.revealSelfAndEmptyNeighbors([...squares], row, column);\n\n    this.setState({\n      squares: newSquares,\n      revealsRemaining: revealsRemaining - revealCount\n    });\n  };\n  onContextMenu = (event, row, column) => {\n    event.preventDefault();\n    const squares = [...this.state.squares];\n\n    if (squares[row][column].revealed) {\n      return;\n    }\n\n    const { flagged } = squares[row][column];\n    squares[row][column].flagged = !flagged;\n\n    this.setState({ squares });\n  };\n  componentDidMount() {\n    this.randomizeBoard();\n  }\n  componentDidUpdate({ gameId: oldGameId }) {\n    const { gameId } = this.props;\n    const { revealsRemaining } = this.state;\n    if (gameId !== oldGameId) {\n      return this.randomizeBoard();\n    }\n    if (revealsRemaining === 0) {\n      console.log(\"you win ðŸ˜€\");\n    }\n  }\n  randomizeBoard() {\n    const { height, width } = this.props;\n\n    const squares = Array(height)\n      .fill(null)\n      .map(() =>\n        Array(width)\n          .fill(null)\n          .map(() => ({ flagged: false, revealed: false, value: 0 }))\n      );\n    const bombs = Math.floor(0.15 * height * width);\n    let bombsPlaced = 0;\n    while (bombsPlaced < bombs) {\n      const randomRow = Math.floor(Math.random() * height);\n      const randomColumn = Math.floor(Math.random() * width);\n      if (squares[randomRow][randomColumn].value === \"ðŸ’£\") {\n        continue;\n      }\n\n      squares[randomRow][randomColumn].value = \"ðŸ’£\";\n      bombsPlaced += 1;\n\n      for (let x = -1; x <= 1; x++) {\n        for (let y = -1; y <= 1; y++) {\n          const neighborX = randomColumn + x;\n          const neighborY = randomRow + y;\n          if (\n            neighborX >= 0 &&\n            neighborX < width &&\n            neighborY >= 0 &&\n            neighborY < height &&\n            squares[neighborY][neighborX].value !== \"ðŸ’£\"\n          ) {\n            squares[neighborY][neighborX].value += 1;\n          }\n        }\n      }\n    }\n    const revealsRemaining = height * width - bombsPlaced;\n    this.setState({ squares, revealsRemaining });\n  }\n  renderSquares() {\n    const { width } = this.props;\n    return (\n      <ul className={`width-${width}`}>\n        {this.state.squares.map((row, rowIndex) => {\n          return row.map((square, columnIndex) => {\n            return (\n              <li\n                key={`${rowIndex}.${columnIndex}`}\n                onClick={event => this.onClick(event, rowIndex, columnIndex)}\n                onContextMenu={event =>\n                  this.onContextMenu(event, rowIndex, columnIndex)\n                }\n                className={`value-${square.value} ${\n                  square.revealed ? \"revealed\" : \"\"\n                }`}\n              >\n                {square.revealed && square.value !== 0\n                  ? square.value\n                  : square.flagged\n                  ? \"ðŸš©\"\n                  : \"\\u00A0\"}\n              </li>\n            );\n          });\n        })}\n      </ul>\n    );\n  }\n  revealSelfAndEmptyNeighbors(squares, row, column, revealCount = 0) {\n    const isEmptySquare = squares[row][column].value === 0;\n    squares[row][column].revealed = true;\n    revealCount += 1;\n    if (isEmptySquare) {\n      for (let x = -1; x <= 1; x++) {\n        for (let y = -1; y <= 1; y++) {\n          const neighborX = column + x;\n          const neighborY = row + y;\n          if (\n            neighborX >= 0 &&\n            neighborX < this.props.width &&\n            neighborY >= 0 &&\n            neighborY < this.props.height &&\n            squares[neighborY][neighborX].value !== \"ðŸ’£\" &&\n            !squares[neighborY][neighborX].revealed &&\n            !squares[neighborY][neighborX].flagged\n          ) {\n            const result = this.revealSelfAndEmptyNeighbors(\n              squares,\n              neighborY,\n              neighborX,\n              revealCount\n            );\n            squares = result.squares;\n            revealCount = result.revealCount;\n          }\n        }\n      }\n    }\n    return { squares, revealCount };\n  }\n  render() {\n    return <div>{this.renderSquares()}</div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./Minesweeper.css\";\n\nexport default class Minesweeper extends Component {\n  state = {\n    boardSettings: {\n      gameId: 0,\n      height: 8,\n      width: 8\n    }\n  };\n  onButtonClick = (height, width) => {\n    const { gameId } = this.state.boardSettings;\n    const boardSettings = { gameId: gameId + 1, height, width };\n    this.setState({ boardSettings });\n  };\n  render() {\n    const { gameId, height, width } = this.state.boardSettings;\n    return (\n      <div>\n        <h1>Minesweeper</h1>\n        <main>\n          New game:\n          <button onClick={() => this.onButtonClick(8, 8)}>Easy</button>\n          <button onClick={() => this.onButtonClick(16, 16)}>Medium</button>\n          <button onClick={() => this.onButtonClick(24, 24)}>Hard</button>\n        </main>\n        <Board gameId={gameId} height={height} width={width} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Minesweeper from \"./components/Minesweeper\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<Minesweeper />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}